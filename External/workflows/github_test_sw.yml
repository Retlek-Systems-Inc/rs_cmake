#######################################################################
# @copyright 2022-2024 Retlek Systems Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Note Using ghcr.io now for docker images - uses Personal Access Token or the
# Default github access token.

name: Software Testing using CMake and C/C++ Compilers
on:
  pull_request:
  push:
    branches:
      - main
      - "releases/*"
    tags:
      - "*"

env:
  BASE_BUILD_DIR: ci_build
  DEPS_DIR: ci_build/deps
  CLANG_DIR: ci_build/clang
  GCC_DIR: ci_build/gcc
  CCACHE_DIR: ccache
  CLANG_VER: 18
  CLANG_CMAKE_ARGS: -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18
  GCC_CMAKE_ARGS: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
  # CLANG_CMAKE_ARGS: -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -DCMAKE_AR=llvm-ar-18 -DCMAKE_RANLIB=llvm-ranlib-18
  # GCC_CMAKE_ARGS: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_AR=gcc-ar

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/retlek-systems-inc/rs_cmake/sw-dev:v0.4.3
    env:
      CMAKE_BUILD_ARGS: -DSTATIC_ANALYSIS=OFF
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Cache CMake Build directories
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_BUILD_DIR }}
          key: ${{ runner.os }}-CMakeFiles
          restore-keys: |
            ${{ runner.os }}-CMakeFiles
      - name: Preparing build directories
        run: |
          mkdir -p ${DEPS_DIR}
          mkdir -p ${CLANG_DIR}
          mkdir -p ${GCC_DIR}
      - name: Preparing CMake clang
        run: cmake -G "Ninja Multi-Config" -B${CLANG_DIR} ${CLANG_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .
      - name: Preparing CMake gcc
        run: cmake -G "Ninja Multi-Config" -B${GCC_DIR} ${GCC_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .

  build-and-test:
    name: ${{ matrix.name }} Build and Test
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/retlek-systems-inc/rs_cmake/sw-dev:v0.4.3
      options: --privileged # For Tsan below can remove once https://github.com/google/sanitizers/issues/1716 no longer an issue
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Clang Debug"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Debug
          - name: "Clang RelWithDebInfo"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: RelWithDebInfo
          - name: "Clang Address Sanitizer"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Asan
          - name: "Clang Thread Sanitizer"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Tsan
          - name: "Clang Memory Sanitizer"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Msan
          - name: "Clang Undefined Behavior Sanitizer"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Ubsan
          - name: "GCC Debug"
            build_dir: ci_build/gcc #{{ env.GCC_DIR}}
            build_type: Debug
          - name: "GCC RelWithDebInfo"
            build_dir: ci_build/gcc #{{ env.GCC_DIR}}
            build_type: RelWithDebInfo
          - name: "GCC Coverage"
            build_dir: ci_build/gcc #{{ env.GCC_DIR}}
            build_type: Coverage
    env:
      BUILD_DIR: ${{ matrix.build_dir }}
      BUILD_TYPE: ${{ matrix.build_type }}
      CMAKE_BUILD_ARGS: -DSTATIC_ANALYSIS=OFF
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Cached CMake Build directories
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_BUILD_DIR }}
          key: ${{ runner.os }}-CMakeFiles
          restore-keys: |
            ${{ runner.os }}-CMakeFiles
      - name: Cached CCACHE directories
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.build_type }}-CCache
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_type }}-CCache
      - name: Preparing CMake clang
        if: ${{ matrix.build_dir == env.CLANG_DIR }}
        run: cmake -G "Ninja Multi-Config" -B${CLANG_DIR} ${CLANG_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .
      - name: Preparing CMake gcc
        if: ${{ matrix.build_dir == env.GCC_DIR }}
        run: cmake -G "Ninja Multi-Config" -B${GCC_DIR} ${GCC_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .
      # - name: Fix for Tsan mmap random bits
      #   if: ${{ matrix.build_type == 'Tsan' }}
      #   run: sysctl -w vm.mmap_rnd_bits=28 # See: https://github.com/google/sanitizers/issues/1716
      - name: Build ${{ matrix.build_type }} in ${{ matrix.build_dir }}
        run: cmake --build ${BUILD_DIR} --config ${BUILD_TYPE} -- -k 10000
      - name: Test ${{ matrix.build_type }} in ${{ matrix.build_dir }}
        run: ctest --test-dir ${BUILD_DIR} -C ${BUILD_TYPE} --output-on-failure --output-junit ${BUILD_TYPE}_report.xml
      - name: Coverage Report ${{ matrix.build_type }} in ${{ matrix.build_dir }}
        if: ${{ matrix.build_type == 'Coverage' }} # Only perform for Coverage.
        run: cmake --build ${BUILD_DIR} --config ${BUILD_TYPE} --target code-coverage
      - name: Code Coverage Artifacts
        if: ${{ matrix.build_type == 'Coverage' }} # Only perform for Coverage.
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: ${{ matrix.build_dir }}/code-coverage/
      - name: Publish Test Report
        if: ${{ always() }}
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: "${{ matrix.build_dir }}/${{ matrix.build_type }}_report.xml"
          fail_on_failure: true
          require_tests: true

  analyze:
    name: ${{ matrix.name }} Analysis
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/retlek-systems-inc/rs_cmake/sw-dev:v0.4.3
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "ClangTidy"
            build_dir: ci_build/clang #{{ env.CLANG_DIR}}
            build_type: Debug
            build_args: -DSTATIC_ANALYSIS=ON -DUSE_CLANG_TIDY=ON
          - name: "CppCheck"
            build_dir: ci_build/gcc #{{ env.GCC_DIR}}
            build_type: Debug
            build_args: -DSTATIC_ANALYSIS=ON -DUSE_CLANG_TIDY=OFF -DUSE_CPPCHECK=ON
          - name: "CppLint"
            build_dir: ci_build/gcc #{{ env.GCC_DIR}}
            build_type: Debug
            build_args: -DSTATIC_ANALYSIS=ON -DUSE_CLANG_TIDY=OFF -DUSE_CPPLINT=ON
    env:
      BUILD_DIR: ${{ matrix.build_dir }}
      BUILD_TYPE: ${{ matrix.build_type }}
      CMAKE_BUILD_ARGS: ${{ matrix.build_args }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Cached CMake Build directories
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_BUILD_DIR }}
          key: ${{ runner.os }}-CMakeFiles
          restore-keys: |
            ${{ runner.os }}-CMakeFiles
      - name: Cached CCACHE directories
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.build_type }}-CCache
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_type }}-CCache
      - name: Preparing CMake clang
        if: ${{ matrix.build_dir == env.CLANG_DIR }}
        run: cmake -G "Ninja Multi-Config" -B${CLANG_DIR} ${CLANG_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .
      - name: Preparing CMake gcc
        if: ${{ matrix.build_dir == env.GCC_DIR }}
        run: cmake -G "Ninja Multi-Config" -B${GCC_DIR} ${GCC_CMAKE_ARGS} -DFETCHCONTENT_BASE_DIR=${DEPS_DIR} ${CMAKE_BUILD_ARGS} .
      - name: Scan Build ${{ matrix.build_type }} in ${{ matrix.build_dir }}
        run: scan-build-${CLANG_VER} -o scan-build -k --status-bugs -internal-stats --keep-empty cmake --build ${BUILD_DIR} --config ${BUILD_TYPE}
      - name: Scan Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_type }}-scan-results
          path: ${{ matrix.build_dir }}/scan-build/
          if-no-files-found: ignore
